// Code generated by "stringer -type=InfoType"; DO NOT EDIT.

package dispremote

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InfoTypeTrackPositionMs-0]
	_ = x[InfoTypeTrackIndex-1]
	_ = x[InfoTypeChapterIndex-2]
	_ = x[InfoTypePlayStatus-3]
	_ = x[InfoTypeVolume-4]
	_ = x[InfoTypePower-5]
	_ = x[InfoTypeEqualizer-6]
	_ = x[InfoTypeShuffle-7]
	_ = x[InfoTypeRepeat-8]
	_ = x[InfoTypeDateTime-9]
	_ = x[InfoTypeBacklight-11]
	_ = x[InfoTypeHoldSwitch-12]
	_ = x[InfoTypeSoundCheck-13]
	_ = x[InfoTypeAudiobookSpeed-14]
	_ = x[InfoTypeTrackPositionSec-15]
	_ = x[InfoTypeVolume2-16]
}

const (
	_InfoType_name_0 = "InfoTypeTrackPositionMsInfoTypeTrackIndexInfoTypeChapterIndexInfoTypePlayStatusInfoTypeVolumeInfoTypePowerInfoTypeEqualizerInfoTypeShuffleInfoTypeRepeatInfoTypeDateTime"
	_InfoType_name_1 = "InfoTypeBacklightInfoTypeHoldSwitchInfoTypeSoundCheckInfoTypeAudiobookSpeedInfoTypeTrackPositionSecInfoTypeVolume2"
)

var (
	_InfoType_index_0 = [...]uint8{0, 23, 41, 61, 79, 93, 106, 123, 138, 152, 168}
	_InfoType_index_1 = [...]uint8{0, 17, 35, 53, 75, 99, 114}
)

func (i InfoType) String() string {
	switch {
	case i <= 9:
		return _InfoType_name_0[_InfoType_index_0[i]:_InfoType_index_0[i+1]]
	case 11 <= i && i <= 16:
		i -= 11
		return _InfoType_name_1[_InfoType_index_1[i]:_InfoType_index_1[i+1]]
	default:
		return "InfoType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
